/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inv_amain;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import javax.swing.JOptionPane;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import rojeru_san.rsdate.RSDateChooser;

/**
 *
 * @author PREDATOR HELIOS 300
 */
public class B_InventoryPanel extends javax.swing.JPanel {

    //sql
    Connection conn = null;
    ResultSet st = null;
    PreparedStatement ps = null;

    //load table
    public B_InventoryPanel() {
        initComponents();
        conn = SQLConnection.getConnection();
        inventoryTB_load();
        disablePaste(txtInventoryUPCsearch);
        disablePaste(txtInvONHAND);
        disablePaste(txtInvPRICE);
        disablePaste(InvDateChooser);
        disablePaste(InvExpDateChooser);
    }

    //How To Upload images And Display Image From Mysql Database In Java | MySQL
    File f = null;
    String path = null;
    private ImageIcon format = null;
    String fname = null;
    int s = 0;
    byte[] pimage = null;

    //table load
    public void inventoryTB_load() {
        try {
            DefaultTableModel dt = (DefaultTableModel) inv_table.getModel();
            dt.setRowCount(0);
            Statement s = SQLConnection.getConnection().createStatement();
            ResultSet rs = s.executeQuery("SELECT * FROM inventory");
            while (rs.next()) {
                Vector v = new Vector();

                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                v.add(rs.getString(6));
                v.add(rs.getString(7));

                dt.addRow(v);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    //load image
    public void LoadImage() {
        try {
            byte[] imagedata = st.getBytes("imageFile");
            format = new ImageIcon(imagedata);
            Image mm = format.getImage();
            Image img2 = mm.getScaledInstance(lbl_img.getWidth(), lbl_img.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon image = new ImageIcon(img2);

            lbl_img.setIcon(image);
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    //img id
    public void LoadImageID() {
        try {
            ps = conn.prepareStatement("SELECT inv_IMG FROM inventory");
            st = ps.executeQuery();

            txtInventoryUPCsearch.removeAll();
        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }

    //disable copy paste
    public void disableCopy(JComponent component) {
        component.getInputMap().put(KeyStroke.getKeyStroke("control C"), "none");
    }

    public void disablePaste(JComponent component) {
        component.getInputMap().put(KeyStroke.getKeyStroke("control V"), "none");
    }

    public void disableCopyPaste(JComponent component) {
        disableCopy(component);
        disablePaste(component);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EmployeePanel = new javax.swing.JPanel();
        InventoryPanelLbl = new javax.swing.JLabel();
        InventoryUPCLbl = new javax.swing.JLabel();
        txtInventoryUPCsearch = new javax.swing.JTextField();
        Line1 = new javax.swing.JPanel();
        InvSearchBtn = new com.k33ptoo.components.KButton();
        lbl_img = new javax.swing.JLabel();
        InvINSERT_IMGBtn = new com.k33ptoo.components.KButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inv_table = new rojeru_san.complementos.TableMetro();
        InvNAMELbl = new javax.swing.JLabel();
        txtInvNAME = new javax.swing.JTextField();
        Line3 = new javax.swing.JPanel();
        InvLOCATIONLbl = new javax.swing.JLabel();
        txtInvLOCATION = new javax.swing.JTextField();
        Line4 = new javax.swing.JPanel();
        InvONHANDLbl = new javax.swing.JLabel();
        txtInvONHAND = new javax.swing.JTextField();
        Line5 = new javax.swing.JPanel();
        InvPRICELbl = new javax.swing.JLabel();
        txtInvPRICE = new javax.swing.JTextField();
        Line6 = new javax.swing.JPanel();
        InvDATELbl = new javax.swing.JLabel();
        InvDateChooser = new rojeru_san.rsdate.RSDateChooser();
        InvADDBtn = new com.k33ptoo.components.KButton();
        InvDELBtn = new com.k33ptoo.components.KButton();
        InvUPDATEBtn = new com.k33ptoo.components.KButton();
        InvExpDateChooser = new rojeru_san.rsdate.RSDateChooser();
        InvDATELbl1 = new javax.swing.JLabel();
        CustClearField = new com.k33ptoo.components.KButton();

        setMaximumSize(new java.awt.Dimension(890, 650));
        setPreferredSize(new java.awt.Dimension(890, 650));

        EmployeePanel.setBackground(new java.awt.Color(245, 215, 189));
        EmployeePanel.setForeground(new java.awt.Color(245, 215, 189));
        EmployeePanel.setMaximumSize(new java.awt.Dimension(890, 650));
        EmployeePanel.setPreferredSize(new java.awt.Dimension(890, 650));

        InventoryPanelLbl.setBackground(new java.awt.Color(0, 0, 0));
        InventoryPanelLbl.setFont(new java.awt.Font("Retro Computer", 1, 18)); // NOI18N
        InventoryPanelLbl.setForeground(new java.awt.Color(0, 0, 0));
        InventoryPanelLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        InventoryPanelLbl.setText("inventory items");
        InventoryPanelLbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        InventoryUPCLbl.setBackground(new java.awt.Color(0, 0, 0));
        InventoryUPCLbl.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        InventoryUPCLbl.setForeground(new java.awt.Color(0, 0, 0));
        InventoryUPCLbl.setText("Search UPC");

        txtInventoryUPCsearch.setBackground(new java.awt.Color(245, 215, 189));
        txtInventoryUPCsearch.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        txtInventoryUPCsearch.setForeground(new java.awt.Color(0, 0, 0));
        txtInventoryUPCsearch.setBorder(null);
        txtInventoryUPCsearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInventoryUPCsearchKeyTyped(evt);
            }
        });

        Line1.setBackground(new java.awt.Color(175, 157, 206));
        Line1.setPreferredSize(new java.awt.Dimension(258, 3));

        javax.swing.GroupLayout Line1Layout = new javax.swing.GroupLayout(Line1);
        Line1.setLayout(Line1Layout);
        Line1Layout.setHorizontalGroup(
            Line1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
        );
        Line1Layout.setVerticalGroup(
            Line1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        InvSearchBtn.setText("search");
        InvSearchBtn.setFont(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        InvSearchBtn.setkBorderRadius(30);
        InvSearchBtn.setkEndColor(new java.awt.Color(175, 157, 206));
        InvSearchBtn.setkForeGround(new java.awt.Color(245, 215, 189));
        InvSearchBtn.setkHoverEndColor(new java.awt.Color(245, 195, 152));
        InvSearchBtn.setkHoverForeGround(new java.awt.Color(175, 157, 206));
        InvSearchBtn.setkHoverStartColor(new java.awt.Color(245, 195, 152));
        InvSearchBtn.setkPressedColor(new java.awt.Color(242, 179, 65));
        InvSearchBtn.setkStartColor(new java.awt.Color(175, 157, 206));
        InvSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvSearchBtnActionPerformed(evt);
            }
        });

        lbl_img.setAlignmentY(0.0F);
        lbl_img.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(201, 189, 223), 2));
        lbl_img.setMaximumSize(new java.awt.Dimension(164, 164));
        lbl_img.setMinimumSize(new java.awt.Dimension(164, 164));

        InvINSERT_IMGBtn.setText("insert image");
        InvINSERT_IMGBtn.setFont(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        InvINSERT_IMGBtn.setkBorderRadius(30);
        InvINSERT_IMGBtn.setkEndColor(new java.awt.Color(175, 157, 206));
        InvINSERT_IMGBtn.setkForeGround(new java.awt.Color(245, 215, 189));
        InvINSERT_IMGBtn.setkHoverEndColor(new java.awt.Color(245, 195, 152));
        InvINSERT_IMGBtn.setkHoverForeGround(new java.awt.Color(175, 157, 206));
        InvINSERT_IMGBtn.setkHoverStartColor(new java.awt.Color(245, 195, 152));
        InvINSERT_IMGBtn.setkPressedColor(new java.awt.Color(242, 179, 65));
        InvINSERT_IMGBtn.setkStartColor(new java.awt.Color(175, 157, 206));
        InvINSERT_IMGBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvINSERT_IMGBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(245, 215, 189));
        jScrollPane1.setForeground(new java.awt.Color(245, 215, 189));

        inv_table.setBackground(new java.awt.Color(245, 215, 189));
        inv_table.setForeground(new java.awt.Color(245, 215, 189));
        inv_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "UPC", "NAME", "LOCATION", "ON HAND", "PRICE", "MFG DATE", "EXPIRATION DATE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inv_table.setColorBackgoundHead(new java.awt.Color(142, 126, 167));
        inv_table.setColorBordeFilas(new java.awt.Color(175, 157, 206));
        inv_table.setColorBordeHead(new java.awt.Color(175, 157, 206));
        inv_table.setColorFilasBackgound1(new java.awt.Color(245, 215, 189));
        inv_table.setColorFilasBackgound2(new java.awt.Color(245, 215, 189));
        inv_table.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        inv_table.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        inv_table.setColorForegroundHead(new java.awt.Color(245, 215, 189));
        inv_table.setColorSelBackgound(new java.awt.Color(255, 255, 255));
        inv_table.setColorSelForeground(new java.awt.Color(0, 0, 0));
        inv_table.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        inv_table.setFuenteFilas(new java.awt.Font("Arial", 0, 10)); // NOI18N
        inv_table.setFuenteFilasSelect(new java.awt.Font("Arial", 0, 10)); // NOI18N
        inv_table.setFuenteHead(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        inv_table.setGridColor(new java.awt.Color(175, 157, 206));
        inv_table.setRowHeight(25);
        inv_table.setSelectionBackground(new java.awt.Color(255, 255, 255));
        inv_table.setSelectionForeground(new java.awt.Color(245, 215, 189));
        inv_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inv_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(inv_table);
        if (inv_table.getColumnModel().getColumnCount() > 0) {
            inv_table.getColumnModel().getColumn(0).setResizable(false);
            inv_table.getColumnModel().getColumn(0).setPreferredWidth(60);
            inv_table.getColumnModel().getColumn(1).setMinWidth(200);
            inv_table.getColumnModel().getColumn(1).setPreferredWidth(200);
            inv_table.getColumnModel().getColumn(1).setMaxWidth(200);
            inv_table.getColumnModel().getColumn(4).setMinWidth(60);
            inv_table.getColumnModel().getColumn(4).setMaxWidth(60);
        }

        InvNAMELbl.setBackground(new java.awt.Color(0, 0, 0));
        InvNAMELbl.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        InvNAMELbl.setForeground(new java.awt.Color(0, 0, 0));
        InvNAMELbl.setText("item NAME");

        txtInvNAME.setBackground(new java.awt.Color(245, 215, 189));
        txtInvNAME.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        txtInvNAME.setForeground(new java.awt.Color(0, 0, 0));
        txtInvNAME.setBorder(null);
        txtInvNAME.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInvNAMEKeyTyped(evt);
            }
        });

        Line3.setBackground(new java.awt.Color(175, 157, 206));
        Line3.setPreferredSize(new java.awt.Dimension(258, 3));

        javax.swing.GroupLayout Line3Layout = new javax.swing.GroupLayout(Line3);
        Line3.setLayout(Line3Layout);
        Line3Layout.setHorizontalGroup(
            Line3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        Line3Layout.setVerticalGroup(
            Line3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        InvLOCATIONLbl.setBackground(new java.awt.Color(0, 0, 0));
        InvLOCATIONLbl.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        InvLOCATIONLbl.setForeground(new java.awt.Color(0, 0, 0));
        InvLOCATIONLbl.setText("item LOCATION");

        txtInvLOCATION.setBackground(new java.awt.Color(245, 215, 189));
        txtInvLOCATION.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        txtInvLOCATION.setForeground(new java.awt.Color(0, 0, 0));
        txtInvLOCATION.setBorder(null);
        txtInvLOCATION.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInvLOCATIONKeyTyped(evt);
            }
        });

        Line4.setBackground(new java.awt.Color(175, 157, 206));
        Line4.setPreferredSize(new java.awt.Dimension(258, 3));

        javax.swing.GroupLayout Line4Layout = new javax.swing.GroupLayout(Line4);
        Line4.setLayout(Line4Layout);
        Line4Layout.setHorizontalGroup(
            Line4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        Line4Layout.setVerticalGroup(
            Line4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        InvONHANDLbl.setBackground(new java.awt.Color(0, 0, 0));
        InvONHANDLbl.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        InvONHANDLbl.setForeground(new java.awt.Color(0, 0, 0));
        InvONHANDLbl.setText("stock ON HAND");

        txtInvONHAND.setBackground(new java.awt.Color(245, 215, 189));
        txtInvONHAND.setFont(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        txtInvONHAND.setForeground(new java.awt.Color(0, 0, 0));
        txtInvONHAND.setBorder(null);
        txtInvONHAND.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInvONHANDKeyTyped(evt);
            }
        });

        Line5.setBackground(new java.awt.Color(175, 157, 206));
        Line5.setPreferredSize(new java.awt.Dimension(258, 3));

        javax.swing.GroupLayout Line5Layout = new javax.swing.GroupLayout(Line5);
        Line5.setLayout(Line5Layout);
        Line5Layout.setHorizontalGroup(
            Line5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        Line5Layout.setVerticalGroup(
            Line5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        InvPRICELbl.setBackground(new java.awt.Color(0, 0, 0));
        InvPRICELbl.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        InvPRICELbl.setForeground(new java.awt.Color(0, 0, 0));
        InvPRICELbl.setText("item PRICE");

        txtInvPRICE.setBackground(new java.awt.Color(245, 215, 189));
        txtInvPRICE.setFont(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        txtInvPRICE.setForeground(new java.awt.Color(0, 0, 0));
        txtInvPRICE.setBorder(null);
        txtInvPRICE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInvPRICEKeyTyped(evt);
            }
        });

        Line6.setBackground(new java.awt.Color(175, 157, 206));
        Line6.setPreferredSize(new java.awt.Dimension(258, 3));

        javax.swing.GroupLayout Line6Layout = new javax.swing.GroupLayout(Line6);
        Line6.setLayout(Line6Layout);
        Line6Layout.setHorizontalGroup(
            Line6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        Line6Layout.setVerticalGroup(
            Line6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        InvDATELbl.setBackground(new java.awt.Color(0, 0, 0));
        InvDATELbl.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        InvDATELbl.setForeground(new java.awt.Color(0, 0, 0));
        InvDATELbl.setText("Manufacturing date");

        InvDateChooser.setColorBackground(new java.awt.Color(175, 157, 206));
        InvDateChooser.setColorButtonHover(new java.awt.Color(175, 157, 206));
        InvDateChooser.setColorForeground(new java.awt.Color(201, 189, 223));
        InvDateChooser.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        InvDateChooser.setFormatoFecha("yyyy-MM-dd");
        InvDateChooser.setFuente(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        InvDateChooser.setLanguage(rojeru_san.rsdate.RSDateChooser.Language.ENGLISH);
        InvDateChooser.setMaximumSize(new java.awt.Dimension(200, 200));
        InvDateChooser.setPlaceholder("SELECT DATE");
        InvDateChooser.setPreferredSize(new java.awt.Dimension(258, 33));
        InvDateChooser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                InvDateChooserKeyTyped(evt);
            }
        });

        InvADDBtn.setText("ADD");
        InvADDBtn.setFont(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        InvADDBtn.setkBorderRadius(30);
        InvADDBtn.setkEndColor(new java.awt.Color(175, 157, 206));
        InvADDBtn.setkForeGround(new java.awt.Color(245, 215, 189));
        InvADDBtn.setkHoverEndColor(new java.awt.Color(245, 195, 152));
        InvADDBtn.setkHoverForeGround(new java.awt.Color(175, 157, 206));
        InvADDBtn.setkHoverStartColor(new java.awt.Color(245, 195, 152));
        InvADDBtn.setkPressedColor(new java.awt.Color(242, 179, 65));
        InvADDBtn.setkStartColor(new java.awt.Color(175, 157, 206));
        InvADDBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvADDBtnActionPerformed(evt);
            }
        });

        InvDELBtn.setText("delete");
        InvDELBtn.setFont(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        InvDELBtn.setkBorderRadius(30);
        InvDELBtn.setkEndColor(new java.awt.Color(175, 157, 206));
        InvDELBtn.setkForeGround(new java.awt.Color(245, 215, 189));
        InvDELBtn.setkHoverEndColor(new java.awt.Color(245, 195, 152));
        InvDELBtn.setkHoverForeGround(new java.awt.Color(175, 157, 206));
        InvDELBtn.setkHoverStartColor(new java.awt.Color(245, 195, 152));
        InvDELBtn.setkPressedColor(new java.awt.Color(242, 179, 65));
        InvDELBtn.setkStartColor(new java.awt.Color(175, 157, 206));
        InvDELBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvDELBtnActionPerformed(evt);
            }
        });

        InvUPDATEBtn.setText("update");
        InvUPDATEBtn.setFont(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        InvUPDATEBtn.setkBorderRadius(30);
        InvUPDATEBtn.setkEndColor(new java.awt.Color(175, 157, 206));
        InvUPDATEBtn.setkForeGround(new java.awt.Color(245, 215, 189));
        InvUPDATEBtn.setkHoverEndColor(new java.awt.Color(245, 195, 152));
        InvUPDATEBtn.setkHoverForeGround(new java.awt.Color(175, 157, 206));
        InvUPDATEBtn.setkHoverStartColor(new java.awt.Color(245, 195, 152));
        InvUPDATEBtn.setkPressedColor(new java.awt.Color(242, 179, 65));
        InvUPDATEBtn.setkStartColor(new java.awt.Color(175, 157, 206));
        InvUPDATEBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvUPDATEBtnActionPerformed(evt);
            }
        });

        InvExpDateChooser.setColorBackground(new java.awt.Color(175, 157, 206));
        InvExpDateChooser.setColorButtonHover(new java.awt.Color(175, 157, 206));
        InvExpDateChooser.setColorForeground(new java.awt.Color(201, 189, 223));
        InvExpDateChooser.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        InvExpDateChooser.setFormatoFecha("yyyy-MM-dd");
        InvExpDateChooser.setFuente(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        InvExpDateChooser.setLanguage(rojeru_san.rsdate.RSDateChooser.Language.ENGLISH);
        InvExpDateChooser.setMaximumSize(new java.awt.Dimension(200, 200));
        InvExpDateChooser.setPlaceholder("SELECT DATE");
        InvExpDateChooser.setPreferredSize(new java.awt.Dimension(258, 33));

        InvDATELbl1.setBackground(new java.awt.Color(0, 0, 0));
        InvDATELbl1.setFont(new java.awt.Font("Retro Computer", 0, 12)); // NOI18N
        InvDATELbl1.setForeground(new java.awt.Color(0, 0, 0));
        InvDATELbl1.setText("expiration date");

        CustClearField.setText("Clear fields");
        CustClearField.setToolTipText("");
        CustClearField.setFont(new java.awt.Font("Retro Computer", 1, 12)); // NOI18N
        CustClearField.setkBorderRadius(30);
        CustClearField.setkEndColor(new java.awt.Color(175, 157, 206));
        CustClearField.setkForeGround(new java.awt.Color(245, 215, 189));
        CustClearField.setkHoverEndColor(new java.awt.Color(245, 195, 152));
        CustClearField.setkHoverForeGround(new java.awt.Color(175, 157, 206));
        CustClearField.setkHoverStartColor(new java.awt.Color(245, 195, 152));
        CustClearField.setkPressedColor(new java.awt.Color(242, 179, 65));
        CustClearField.setkStartColor(new java.awt.Color(175, 157, 206));
        CustClearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustClearFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EmployeePanelLayout = new javax.swing.GroupLayout(EmployeePanel);
        EmployeePanel.setLayout(EmployeePanelLayout);
        EmployeePanelLayout.setHorizontalGroup(
            EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeePanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EmployeePanelLayout.createSequentialGroup()
                        .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_img, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(InvINSERT_IMGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(EmployeePanelLayout.createSequentialGroup()
                        .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EmployeePanelLayout.createSequentialGroup()
                                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Line1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtInventoryUPCsearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(InventoryPanelLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeePanelLayout.createSequentialGroup()
                                            .addComponent(InvADDBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(InvUPDATEBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(InventoryUPCLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Line3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(InvNAMELbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtInvNAME, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(EmployeePanelLayout.createSequentialGroup()
                                        .addComponent(InvSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(CustClearField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(InvDELBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(EmployeePanelLayout.createSequentialGroup()
                                        .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Line4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(InvLOCATIONLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtInvLOCATION, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Line5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(InvONHANDLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtInvONHAND, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(EmployeePanelLayout.createSequentialGroup()
                                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Line6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(InvPRICELbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtInvPRICE, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(InvDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(InvDATELbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(InvExpDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(InvDATELbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        EmployeePanelLayout.setVerticalGroup(
            EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InventoryPanelLbl)
                .addGap(18, 18, 18)
                .addComponent(InventoryUPCLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EmployeePanelLayout.createSequentialGroup()
                        .addComponent(txtInventoryUPCsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(Line1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(InvSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CustClearField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EmployeePanelLayout.createSequentialGroup()
                        .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(EmployeePanelLayout.createSequentialGroup()
                                .addComponent(lbl_img, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(InvINSERT_IMGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EmployeePanelLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(InvONHANDLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtInvONHAND, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(Line5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeePanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InvNAMELbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtInvNAME, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(Line3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, EmployeePanelLayout.createSequentialGroup()
                        .addGap(322, 322, 322)
                        .addComponent(InvLOCATIONLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtInvLOCATION, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(Line4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EmployeePanelLayout.createSequentialGroup()
                        .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InvPRICELbl)
                            .addComponent(InvDATELbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(EmployeePanelLayout.createSequentialGroup()
                                .addComponent(txtInvPRICE, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(Line6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(InvDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(EmployeePanelLayout.createSequentialGroup()
                        .addComponent(InvDATELbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InvExpDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(EmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InvUPDATEBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InvDELBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InvADDBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(EmployeePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(EmployeePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void InvADDBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvADDBtnActionPerformed

        String itmName = txtInvNAME.getText();
        String loc = txtInvLOCATION.getText();
        String hand = txtInvONHAND.getText();
        String price = txtInvPRICE.getText();

        int savebtn = JOptionPane.showConfirmDialog(null, "Are you sure you want to add this record?", "Add Record", JOptionPane.YES_NO_OPTION);
        if (savebtn == 0) {
            try {
                //Date Valdiation
                Date utilDate = new Date();
                java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                SimpleDateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
                String manuDate = DF.format(InvDateChooser.getDatoFecha());
                String expiDate = DF.format(InvExpDateChooser.getDatoFecha());
                Date mDate = (Date) DF.parse(manuDate);
                Date eDate = (Date) DF.parse(expiDate);
                //Date Validation
                if (lbl_img.getIcon() == null) {
                    JOptionPane.showMessageDialog(null, "Don't leave the image empty");
                } else if (itmName.isEmpty() || loc.isEmpty() || hand.isEmpty() || price.isEmpty() || InvDateChooser.getDatoFecha() == null || InvExpDateChooser.getDatoFecha() == null) {
                    JOptionPane.showMessageDialog(null, "Don't leave the fields empty");
                } else if (!hand.matches("^^\\d{1,6}$")) {
                    JOptionPane.showMessageDialog(null, "Stock on hand accepts 1 to 6 digits only");
                } else if (!price.matches("^^\\d{1,8}$")) {
                    JOptionPane.showMessageDialog(null, "Item Price accepts 1 to 8 digits only");
                } else if (eDate.before(mDate)) {
                    JOptionPane.showMessageDialog(null, "Invalid expiration date. It cannot be earlier than the manufacturing date.");
                    return;
                } else if (eDate.equals(mDate)) {
                    JOptionPane.showMessageDialog(null, "Invalid expiration date. It cannot be equals to the manufacturing date.");
                    return;
                } else {
                    String sql = "INSERT INTO `inventory`(`inv_NAME`, `inv_LOC`, `inv_ONHAND`, `inv_PRICE`, `inv_DATE`,`inv_expDATE`, `inv_IMG`) VALUES (?,?,?,?,?,?,?)";
                    ps = conn.prepareStatement(sql);
                    InputStream is = new FileInputStream(f);

                    ps.setString(1, txtInvNAME.getText());
                    ps.setString(2, txtInvLOCATION.getText());
                    ps.setString(3, txtInvONHAND.getText()); //validate only number and must start at 09 regex: ^09\d{9}$
                    ps.setString(4, txtInvPRICE.getText()); //validate only number regex: ^\d{1,8}$
                    ps.setString(5, DF.format(InvDateChooser.getDatoFecha()));
                    ps.setString(6, DF.format(InvExpDateChooser.getDatoFecha()));
                    ps.setBlob(7, is);

                    ps.execute();
                    JOptionPane.showMessageDialog(null, "Data saved successfully");
                    inventoryTB_load();
                    txtInventoryUPCsearch.setText("");
                    txtInvNAME.setText("");
                    txtInvLOCATION.setText("");
                    txtInvONHAND.setText("");
                    txtInvPRICE.setText("");
                    InvDateChooser.setDatoFecha(null);
                    InvExpDateChooser.setDatoFecha(null);
                    lbl_img.setIcon(null);
                }

            } catch (NullPointerException calen) {
                JOptionPane.showMessageDialog(null, "Calendar doesn't have date values");
                // System.out.println(ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_InvADDBtnActionPerformed

    private void InvSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvSearchBtnActionPerformed

        String search = txtInventoryUPCsearch.getText();
        try {

            Statement st = SQLConnection.getConnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM inventory WHERE upc ='" + search + "' ");
            if (rs.next()) {

                txtInvNAME.setText(rs.getString("inv_NAME"));
                txtInvLOCATION.setText(rs.getString("inv_LOC"));
                txtInvONHAND.setText(rs.getString("inv_ONHAND"));
                txtInvPRICE.setText(rs.getString("inv_PRICE"));
                InvDateChooser.setDatoFecha(rs.getDate("inv_DATE"));
                //image display start
                byte[] img = rs.getBytes("inv_IMG");
                ImageIcon image = new ImageIcon(img);
                Image im = image.getImage();
                Image myImg = im.getScaledInstance(lbl_img.getWidth(), lbl_img.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon newImage = new ImageIcon(myImg);
                lbl_img.setIcon(newImage);
                //image display end
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);

        }
    }//GEN-LAST:event_InvSearchBtnActionPerformed
    //UPDATE
    private void InvUPDATEBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvUPDATEBtnActionPerformed

        String UPC = txtInventoryUPCsearch.getText();

        String itmName = txtInvNAME.getText();
        String loc = txtInvLOCATION.getText();
        String hand = txtInvONHAND.getText();
        String price = txtInvPRICE.getText();

        try {
            //Date Valdiation
            Date utilDate = new Date();
            java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
            SimpleDateFormat DF = new SimpleDateFormat("yyyy-MM-dd");
            String manuDate = DF.format(InvDateChooser.getDatoFecha());
            String expiDate = DF.format(InvExpDateChooser.getDatoFecha());
            Date mDate = (Date) DF.parse(manuDate);
            Date eDate = (Date) DF.parse(expiDate);
            //Date Validation

            if (itmName.isEmpty() || loc.isEmpty() || hand.isEmpty() || price.isEmpty() || InvDateChooser.getDatoFecha() == null || InvExpDateChooser.getDatoFecha() == null) {
                JOptionPane.showMessageDialog(null, "Don't leave the fields empty");
            } else if (lbl_img.getIcon() == null) {
                JOptionPane.showMessageDialog(null, "Don't leave the image empty");
            } else if (!hand.matches("^^\\d{1,6}$")) {
                JOptionPane.showMessageDialog(null, "Stock on hand accepts 1 to 6 digits only");
            } else if (!price.matches("^^\\d{1,8}$")) {
                JOptionPane.showMessageDialog(null, "Item Price accepts 1 to 8 digits only");
            } else if (eDate.before(mDate)) {
                JOptionPane.showMessageDialog(null, "Invalid expiration date. It cannot be earlier than the manufacturing date.");
                return;
            } else if (eDate.equals(mDate)) {
                JOptionPane.showMessageDialog(null, "Invalid expiration date. It cannot be equals to the manufacturing date.");
                return;
            } else if (txtInventoryUPCsearch.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Don't leave the search UPC empty.");
            } else {
                String sql = "UPDATE inventory SET inv_NAME=?, inv_LOC=?, inv_ONHAND=?, inv_PRICE=?, inv_DATE=?, inv_expDATE=? WHERE upc='" + UPC + "'";
                ps = conn.prepareStatement(sql);

                ps.setString(1, txtInvNAME.getText());
                ps.setString(2, txtInvLOCATION.getText());
                ps.setString(3, txtInvONHAND.getText());
                ps.setString(4, txtInvPRICE.getText());
                ps.setString(5, DF.format(InvDateChooser.getDatoFecha()));
                ps.setString(6, DF.format(InvExpDateChooser.getDatoFecha()));

                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Data updated successfully");
                inventoryTB_load();
                txtInventoryUPCsearch.setText("");
                txtInvNAME.setText("");
                txtInvLOCATION.setText("");
                txtInvONHAND.setText("");
                txtInvPRICE.setText("");
                InvDateChooser.setDatoFecha(null);
                InvExpDateChooser.setDatoFecha(null);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Don't leave the fields empty");
        }
        try {
            String sql = "UPDATE inventory SET inv_IMG=? WHERE upc='" + UPC + "'";
            ps = conn.prepareStatement(sql);
            InputStream is = new FileInputStream(f);
            ps.setBlob(1, is);

            ps.executeUpdate();
            //JOptionPane.showMessageDialog(null, "Image updated successfully");
            inventoryTB_load();
            lbl_img.setIcon(null);
        } catch (Exception ex1) {
            // JOptionPane.showMessageDialog(null, ex1); //ire-remove para walang lumabas na exception
        }


    }//GEN-LAST:event_InvUPDATEBtnActionPerformed

    private void InvDELBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvDELBtnActionPerformed
        String UPC = txtInventoryUPCsearch.getText();
        try {
            Statement s = SQLConnection.getConnection().createStatement();
            s.executeUpdate("DELETE FROM inventory WHERE upc='" + UPC + "'");

            JOptionPane.showMessageDialog(null, "Data deleted successfully");

            inventoryTB_load();
            txtInventoryUPCsearch.setText("");

            txtInvNAME.setText("");
            txtInvLOCATION.setText("");
            txtInvONHAND.setText("");
            txtInvPRICE.setText("");
            InvDateChooser.setDatoFecha(null);
            InvExpDateChooser.setDatoFecha(null);
            lbl_img.setIcon(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_InvDELBtnActionPerformed

    private void InvINSERT_IMGBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvINSERT_IMGBtnActionPerformed
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter fnef = new FileNameExtensionFilter("PNG JPG AND JPEG", "png", "jpeg", "jpg");
            fileChooser.addChoosableFileFilter(fnef);
            fileChooser.setFileFilter(fnef);
            fileChooser.setAcceptAllFileFilterUsed(false); // remove the "All files" option
            int load = fileChooser.showOpenDialog(null);

            if (load == fileChooser.APPROVE_OPTION) {

                f = fileChooser.getSelectedFile();
                path = f.getAbsolutePath();
                ImageIcon ii = new ImageIcon(path);
                Image img = ii.getImage().getScaledInstance(lbl_img.getWidth(), lbl_img.getHeight(), Image.SCALE_SMOOTH);
                lbl_img.setIcon(new ImageIcon(img));

            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_InvINSERT_IMGBtnActionPerformed

    private void inv_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inv_tableMouseClicked
        //mouse click & data to textfield
        int r = inv_table.getSelectedRow();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            String upc = inv_table.getValueAt(r, 0).toString();
            String name = inv_table.getValueAt(r, 1).toString();
            String loc = inv_table.getValueAt(r, 2).toString();
            String onhand = inv_table.getValueAt(r, 3).toString();
            String price = inv_table.getValueAt(r, 4).toString();
            java.util.Date date = sdf.parse(inv_table.getValueAt(r, 5).toString());
            java.util.Date expdate = sdf.parse(inv_table.getValueAt(r, 6).toString());

            txtInventoryUPCsearch.setText(upc);
            txtInvNAME.setText(name);
            txtInvLOCATION.setText(loc);
            txtInvONHAND.setText(onhand);
            txtInvPRICE.setText(price);
            InvDateChooser.setDatoFecha(date);
            InvExpDateChooser.setDatoFecha(expdate);

            //String search = txtInventoryUPCsearch.getText();
            Statement st = SQLConnection.getConnection().createStatement();
            String saloimage = txtInventoryUPCsearch.getText();
            ResultSet rs = st.executeQuery("SELECT * FROM inventory WHERE upc ='" + saloimage + "' ");
            if (rs.next()) {
                byte[] img = rs.getBytes("inv_IMG");
                ImageIcon image = new ImageIcon(img);
                Image im = image.getImage();
                Image myImg = im.getScaledInstance(lbl_img.getWidth(), lbl_img.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon newImage = new ImageIcon(myImg);
                lbl_img.setIcon(newImage);
            }

        } catch (Exception e) {
            System.out.println(e);
        }

        //image display end
    }//GEN-LAST:event_inv_tableMouseClicked

    private void CustClearFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustClearFieldActionPerformed
        txtInventoryUPCsearch.setText("");
        txtInvNAME.setText("");
        txtInvLOCATION.setText("");
        txtInvONHAND.setText("");
        txtInvPRICE.setText("");
        InvDateChooser.setDatoFecha(null);
        InvExpDateChooser.setDatoFecha(null);
        lbl_img.setIcon(null);
    }//GEN-LAST:event_CustClearFieldActionPerformed

    private void txtInventoryUPCsearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInventoryUPCsearchKeyTyped
        char c = evt.getKeyChar();
        if (txtInventoryUPCsearch.getText().length() >= 8) {
            evt.consume();
        } else if (!Character.isDigit(c)) {
            evt.consume();
        } else if (Character.isAlphabetic(c)) {
            evt.consume();
        } else if (Character.isLetter(c)) {
            evt.consume();
        } else if (Character.isSpaceChar(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtInventoryUPCsearchKeyTyped

    private void txtInvNAMEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvNAMEKeyTyped
        char c = evt.getKeyChar();
        if (txtInvNAME.getText().length() >= 60) {
            evt.consume();
        }
    }//GEN-LAST:event_txtInvNAMEKeyTyped

    private void txtInvLOCATIONKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvLOCATIONKeyTyped
        char c = evt.getKeyChar();
        if (txtInvLOCATION.getText().length() >= 30) {
            evt.consume();
        }
    }//GEN-LAST:event_txtInvLOCATIONKeyTyped

    private void txtInvONHANDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvONHANDKeyTyped
        char c = evt.getKeyChar();
        if (txtInvONHAND.getText().length() >= 6) {
            evt.consume();
        } else if (!Character.isDigit(c)) {
            evt.consume();
        } else if (Character.isAlphabetic(c)) {
            evt.consume();
        } else if (Character.isLetter(c)) {
            evt.consume();
        } else if (Character.isSpaceChar(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtInvONHANDKeyTyped

    private void txtInvPRICEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInvPRICEKeyTyped
        char c = evt.getKeyChar();
        if (txtInvPRICE.getText().length() >= 8) {
            evt.consume();
        } else if (!Character.isDigit(c)) {
            evt.consume();
        } else if (Character.isAlphabetic(c)) {
            evt.consume();
        } else if (Character.isLetter(c)) {
            evt.consume();
        } else if (Character.isSpaceChar(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtInvPRICEKeyTyped

    private void InvDateChooserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InvDateChooserKeyTyped
        char c = evt.getKeyChar();
        RSDateChooser dateChooser = new RSDateChooser();
        
    }//GEN-LAST:event_InvDateChooserKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.k33ptoo.components.KButton CustClearField;
    private javax.swing.JPanel EmployeePanel;
    private com.k33ptoo.components.KButton InvADDBtn;
    private javax.swing.JLabel InvDATELbl;
    private javax.swing.JLabel InvDATELbl1;
    private com.k33ptoo.components.KButton InvDELBtn;
    private rojeru_san.rsdate.RSDateChooser InvDateChooser;
    private rojeru_san.rsdate.RSDateChooser InvExpDateChooser;
    private com.k33ptoo.components.KButton InvINSERT_IMGBtn;
    private javax.swing.JLabel InvLOCATIONLbl;
    private javax.swing.JLabel InvNAMELbl;
    private javax.swing.JLabel InvONHANDLbl;
    private javax.swing.JLabel InvPRICELbl;
    private com.k33ptoo.components.KButton InvSearchBtn;
    private com.k33ptoo.components.KButton InvUPDATEBtn;
    private javax.swing.JLabel InventoryPanelLbl;
    private javax.swing.JLabel InventoryUPCLbl;
    private javax.swing.JPanel Line1;
    private javax.swing.JPanel Line3;
    private javax.swing.JPanel Line4;
    private javax.swing.JPanel Line5;
    private javax.swing.JPanel Line6;
    private rojeru_san.complementos.TableMetro inv_table;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_img;
    private javax.swing.JTextField txtInvLOCATION;
    private javax.swing.JTextField txtInvNAME;
    private javax.swing.JTextField txtInvONHAND;
    private javax.swing.JTextField txtInvPRICE;
    private javax.swing.JTextField txtInventoryUPCsearch;
    // End of variables declaration//GEN-END:variables

    private String getFileExtension(File f) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
